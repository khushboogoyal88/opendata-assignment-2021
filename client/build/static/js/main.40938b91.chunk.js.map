{"version":3,"sources":["components/Chart/index.js","components/LineCharts/index.js","components/ChooseTime/index.js","App.js","index.js"],"names":["Chart","datas","color","sensor","timeArray","i","push","class","data","labels","datasets","label","borderColor","backgroundColor","width","height","options","maintainAspectRatio","scales","x","display","title","text","y","LineChart","className","Header","handleDate","selectedDate","currentDate","Date","console","log","yesterday","getDate","dayBeforeYesterday","twodaysBeforeYesterday","dates","value","onChange","map","date","index","getMonth","getFullYear","getRawData","a","axios","get","response","App","useState","rawData","setRawData","setSelectedDate","useEffect","then","filteredData","filter","createdAt","e","Number","target","getHours","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wTAwDeA,EAlDD,SAAC,GAGb,IAHyC,IAA3BC,EAA0B,EAA1BA,MAAOC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,OAEtBC,EAAY,GACTC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAUE,KAAKD,GAGjB,OAEI,qBAAKE,MAAM,kBAAX,SACE,cAAC,IAAD,CACEC,KAAM,CACJC,OAAQL,EACRM,SAAU,CACR,CACEC,MAAOR,EACPK,KAAMP,EACNW,YAAaV,EACbW,gBAAiBX,KAIvBY,MAAO,IACPC,OAAQ,IACRC,QAAS,CACPC,qBAAqB,EACrBC,OAAQ,CACNC,EAAG,CACDC,SAAS,EACTC,MAAO,CACLD,SAAS,EACTE,KAAM,gBAGVC,EAAG,CACDH,SAAS,EACTC,MAAO,CACLD,SAAS,EACTE,KAAM,0BCnBTE,G,OAlBG,SAAC,GAAc,IAAZhB,EAAW,EAAXA,KACnB,OACI,qCACA,mEACF,sBAAKiB,UAAU,sBAAf,UAEA,cAAC,EAAD,CAAOxB,MAAOO,EAAK,WAAYN,MAAM,UAAUC,OAAO,aAEtD,cAAC,EAAD,CAAOF,MAAOO,EAAK,WAAYN,MAAM,UAAUC,OAAO,aAEtD,cAAC,EAAD,CAAOF,MAAOO,EAAK,WAAYN,MAAM,UAAUC,OAAO,aAEtD,cAAC,EAAD,CAAOF,MAAOO,EAAK,WAAYN,MAAM,UAAUC,OAAO,qBCmB3CuB,G,OAlCA,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aACtBC,EAAc,IAAIC,KACxBC,QAAQC,IAAIH,GACZ,IAAMI,EAAYJ,EAAYK,UAAY,EACpCC,EAAqBN,EAAYK,UAAY,EAC7CE,EAAyBP,EAAYK,UAAY,EAEjDG,EAAQ,CACZR,EAAYK,UACZD,EACAE,EACAC,GAGF,OACE,qBAAKX,UAAU,SAAf,SACE,qDAEE,wBACEA,UAAU,gBACVa,MAAOV,EACPW,SAAUZ,EAHZ,SAKGU,EAAMG,KAAI,SAACC,EAAMC,GAAP,OACT,yBAAoBJ,MAAOG,EAA3B,UACGA,EADH,IACUZ,EAAYc,WAAa,EADnC,IACuCd,EAAYe,gBADtCF,eCrBnBG,G,OAAU,uCAAG,4BAAAC,EAAA,sEACMC,IAAMC,IAAI,aADhB,cACXC,EADW,yBAEVA,EAASzC,MAFC,2CAAH,sDA0CD0C,EArCH,WACV,MAA8BC,mBAAS,IAAvC,mBAAOC,EAAP,KAAgBC,EAAhB,KACA,EAAwCF,oBAAS,IAAIrB,MAAOI,WAA5D,mBAAON,EAAP,KAAqB0B,EAArB,KAEAC,qBAAU,WACRV,IAAaW,MAAK,SAAChD,GACjB6C,EAAW7C,QAEZ,IAGF,IAKKiD,EAAeL,EAAQM,QAAO,SAAClD,GAEnC,OADa,IAAIsB,KAAKtB,EAAKmD,WAAWzB,YACtBN,KAWlB,OACE,sBAAKH,UAAU,MAAf,UACE,cAAC,EAAD,CAAYE,WApBI,SAACiC,GAClBN,EAAgBO,OAAOD,EAAEE,OAAOxB,SAmBKV,aAAcA,IAClD,cAAC,EAAD,CAAWpB,KAVQ,SAACL,GACtB,OAAOsD,EAAajB,KAAI,SAAChC,GAAD,MAAW,CACjCW,EAAG,IAAIW,KAAKtB,EAAKmD,WAAWI,WAC5BxC,EAAGf,EAAKL,GAAUK,EAAKL,GAAU,aC/BvC6D,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,U","file":"static/js/main.40938b91.chunk.js","sourcesContent":["// Single chart component\nimport React from 'react';\nimport {Line} from 'react-chartjs-2';\n\nimport './Chart.css';\n\nconst Chart = ({datas, color, sensor}) => {\n\n  const timeArray = [];\n  for (let i = 0; i < 24; i++) {\n    timeArray.push(i);\n  }\n\n  return (\n    (\n      <div class='chart_container'>\n        <Line\n          data={{\n            labels: timeArray,\n            datasets: [\n              {\n                label: sensor,\n                data: datas,\n                borderColor: color,\n                backgroundColor: color,\n              },\n            ],\n          }}\n          width={520}\n          height={400}\n          options={{\n            maintainAspectRatio: false,\n            scales: {\n              x: {\n                display: true,\n                title: {\n                  display: true,\n                  text: 'Time in hrs',\n                },\n              },\n              y: {\n                display: true,\n                title: {\n                  display: true,\n                  text: 'Sensor Reading',\n                },\n               \n              },\n            },\n          }}\n        />\n      </div>\n    )\n  );\n};\n\nexport default Chart;\n","// This component will load the whole chart container\n\nimport React from 'react';\nimport Chart from '../Chart';\n\nimport './LineCharts.css';\n\nconst LineChart = ({ data }) => {\n  return (\n      <>\n      <h2>Data collected from all 4 sensors</h2>\n    <div className='linechart_container'>\n    \n    <Chart datas={data('sensor1')} color='#edde0e' sensor='Sensor 1' />\n\n    <Chart datas={data('sensor2')} color='#03fcdf' sensor='Sensor 2' />\n\n    <Chart datas={data('sensor3')} color='#ed0ed3' sensor='Sensor 3' />\n\n    <Chart datas={data('sensor4')} color='#ed3e0e' sensor='Sensor 4' />\n    </div>\n    </>\n  );\n};\n\nexport default LineChart;\n","// This component will handle the date selection from UI\nimport React from 'react';\nimport './ChooseTime.css';\n\nconst Header = ({ handleDate, selectedDate }) => {\n  const currentDate = new Date();\n  console.log(currentDate);\n  const yesterday = currentDate.getDate() - 1;\n  const dayBeforeYesterday = currentDate.getDate() - 2;\n  const twodaysBeforeYesterday = currentDate.getDate() - 3;\n\n  const dates = [\n    currentDate.getDate(),\n    yesterday,\n    dayBeforeYesterday,\n    twodaysBeforeYesterday,\n  ];\n\n  return (\n    <div className='header'>\n      <label>\n        Select the date:\n        <select\n          className='header_select'\n          value={selectedDate}\n          onChange={handleDate}\n        >\n          {dates.map((date, index) => (\n            <option key={index} value={date}>\n              {date}/{currentDate.getMonth() + 1}/{currentDate.getFullYear()}\n            </option>\n          ))}\n        </select>\n      </label>\n    </div>\n  );\n};\n\nexport default Header;\n","import React, { useState, useEffect } from 'react';\n\nimport axios from 'axios';\nimport LineChart from './components/LineCharts';\nimport ChooseTime from './components/ChooseTime';\nimport './App.css'\n\nconst getRawData = async () => {\n  const response = await axios.get('/api/data');\n  return response.data;\n};\n\nconst App = () => {\n  const [rawData, setRawData] = useState([]);\n  const [selectedDate, setSelectedDate] = useState(new Date().getDate());\n\n  useEffect(() => {\n    getRawData().then((data) => {\n      setRawData(data);\n    });\n  }, []);\n\n  //This function will handle the date selection from application\n   const handleDate = (e) => {\n     setSelectedDate(Number(e.target.value));\n   };\n\n   //This function will fetch selected date data\n  const filteredData = rawData.filter((data) => {\n    const date = new Date(data.createdAt).getDate();\n    return date === selectedDate;\n  });\n\n  // This function will structure the data in the form needed for charts\n  const structuredData = (sensor) => {\n    return filteredData.map((data) => ({\n      x: new Date(data.createdAt).getHours(),\n      y: data[sensor] ? data[sensor] : 0,\n    }));\n  };\n\n  return (\n    <div className='App'>\n      <ChooseTime handleDate={handleDate} selectedDate={selectedDate} />\n      <LineChart data={structuredData} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\n"],"sourceRoot":""}